load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("@gazelle//:def.bzl", "gazelle")
load("@rules_pkg//pkg:install.bzl", "pkg_install")
load("@rules_pkg//pkg:mappings.bzl", "pkg_attributes", "pkg_filegroup", "pkg_files", "strip_prefix")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("//:settings.bzl", "include_scanner_rule")

exports_files(["go.mod"])

# gazelle:prefix github.com/bazelbuild/reclient
# gazelle:exclude docker
# gazelle:exclude **/*.pb.go
gazelle(
    name = "gazelle",
    build_tags = ["goma"],
)

platform(
    name = "x64_windows",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:windows",
        "@bazel_tools//tools/cpp:clang-cl",
    ],
    visibility = ["//visibility:public"],
)

config_setting(
    name = "windows",
    constraint_values = ["@platforms//os:windows"],
)

config_setting(
    name = "linux",
    constraint_values = ["@platforms//os:linux"],
)

config_setting(
    name = "macos",
    constraint_values = ["@platforms//os:macos"],
)

include_scanner_rule(
    name = "include_scanner",
    build_setting_default = "clangscandeps",
)

config_setting(
    name = "clangscandeps_input_processor_config",
    flag_values = {":include_scanner": "clangscandeps"},
)

config_setting(
    name = "clangscandeps_input_processor_config_windows",
    constraint_values = ["@platforms//os:windows"],
    flag_values = {
        ":include_scanner": "clangscandeps",
    },
)

config_setting(
    name = "goma_input_processor_config",
    flag_values = {":include_scanner": "goma"},
)

config_setting(
    name = "goma_input_processor_config_windows",
    constraint_values = ["@platforms//os:windows"],
    flag_values = {
        ":include_scanner": "goma",
    },
)

config_setting(
    name = "goma_input_processor_config_windows_dbg",
    constraint_values = ["@platforms//os:windows"],
    flag_values = {
        ":include_scanner": "goma",
    },
    values = {"features": "dbg"},
)

config_setting(
    name = "config_windows_dbg",
    constraint_values = ["@platforms//os:windows"],
    values = {"features": "dbg"},
)

bool_flag(
    name = "use_android_glibc",
    build_setting_default = False,
)

config_setting(
    name = "use_android_glibc_true",
    constraint_values = ["@platforms//os:linux"],
    flag_values = {
        ":use_android_glibc": "True",
    },
)

genrule(
    name = "version_txt",
    srcs = ["//internal/pkg/version:version_txt"],
    outs = ["version.txt"],
    cmd = "cat $(location //internal/pkg/version:version_txt) >> $@;" + select({
        "//:clangscandeps_input_processor_config": "",
        "//:goma_input_processor_config": "echo -n \"-gomaip\" >> $@",
    }),
    visibility = ["//visibility:public"],
)

pkg_files(
    name = "artifacts_regular",
    srcs = [
        "LICENSE",
        "NOTICE",
        "version.txt",
        "//cmd/scandeps:scandeps_server_sym",
    ],
    strip_prefix = strip_prefix.files_only(),
)

pkg_files(
    name = "artifacts_executable",
    srcs = [
        "//cmd/bootstrap",
        "//cmd/dumpstats",
        "//cmd/logdump",
        "//cmd/metricsuploader",
        "//cmd/reclientreport",
        "//cmd/reproxy",
        "//cmd/reproxystatus",
        "//cmd/rewrapper",
        "//cmd/rpl2cloudtrace",
        "//cmd/rpl2trace",
        "//cmd/scandeps:scandeps_server.stripped",
        "@com_github_bazelbuild_remote_apis_sdks//go/cmd/remotetool",
    ],
    attributes = pkg_attributes(
        mode = "0755",
    ),
    renames = select({
        "//conditions:default": {
            "//cmd/scandeps:scandeps_server.stripped": "scandeps_server",
        },
        "@platforms//os:windows": {
            "//cmd/scandeps:scandeps_server.stripped": "scandeps_server.exe",
        },
    }),
    strip_prefix = strip_prefix.files_only(),
)

pkg_filegroup(
    name = "artifacts",
    srcs = [
        ":artifacts_executable",
        ":artifacts_regular",
    ],
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "artifacts_tar",
    srcs = [":artifacts"],
    out = "artifacts.tar",
    visibility = ["//visibility:public"],
)

pkg_install(
    name = "artifacts_install",
    srcs = [":artifacts"],
)
